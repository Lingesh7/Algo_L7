Python 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)]
Type "copyright", "credits" or "license" for more information.

IPython 7.19.0 -- An enhanced Interactive Python.

from XTConnect.Connect import XTSConnect

API_KEY = "ebaa4a8cf2de358e53c942"
API_SECRET = "Ojre664@S9"
XTS_API_BASE_URL = "https://xts-api.trading"
source = "WEBAPI"

xt = XTSConnect(API_KEY, API_SECRET, source)
response = xt.interactive_login()

print("Login: ", response)
Login:  {'type': 'success', 'code': 's-user-0001', 'description': 'Valid User.', 'result': {'enums': {'socketEvent': ['joined', 'error', 'warning', 'success', 'order', 'trade', 'logout', 'position', 'tradeConversion'], 'orderSide': ['BUY', 'SELL'], 'orderSource': ['TWSAPI', 'WebAPI', 'MobileAndroidAPI', 'MobileWindowsAPI', 'MobileIOSAPI'], 'positionSqureOffMode': ['DayWise', 'NetWise'], 'positionSquareOffQuantityType': ['Percentage', 'ExactQty'], 'dayOrNet': ['DAY', 'NET'], 'instrumentType': ['Futures', 'Options', 'Spread', 'Equity', 'Spot', 'PreferenceShares', 'Debentures', 'Warrants', 'Miscellaneous', 'MutualFund'], 'exchangeSegment': ['NSECM', 'NSEFO', 'NSECD', 'NSECOMMODITY', 'BSECM', 'BSEFO', 'BSECD', 'NCDEX', 'MSEICM', 'MSEIFO', 'MSEICD', 'MCXFO'], 'exchangeInfo': {'NSECM': {'productType': ['CO', 'BO', 'CNC', 'MIS', 'NRML'], 'orderType': ['StopLimit', 'StopMarket', 'Limit', 'Market'], 'timeInForce': ['DAY', 'IOC']}, 'NSEFO': {'productType': ['CO', 'BO', 'MIS', 'NRML'], 'orderType': ['StopLimit', 'StopMarket', 'Limit', 'Market'], 'timeInForce': ['DAY', 'IOC']}}}, 'clientCodes': ['IIFL24'], 'exchangeSegmentArray': [{'key': 'NSECM', 'value': 'NSECM'}, {'key': 'NSEFO', 'value': 'NSEFO'}], 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiJJSUZMMjRfSU5URVJBQ1RJVkUiLCJwdWJsaWNLZXkiOiJlYmFhNGE4Y2YyZGUzNThlNTNjOTQyIiwiaWF0IjoxNjA4NTMyNzc1LCJleHAiOjE2MDg2MTkxNzV9.ya88pv4LICsS5SrIEd79QhmDvbnMYVU3T0eWjR1FCPk', 'userID': 'IIFL24', 'isInvestorClient': True, 'isOneTouchUser': False}}

response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='26Mar2020',
    optionType='CE',
    strikePrice=10000)
print('Option Symbol:', str(response))
Option Symbol: {'type': 'error', 'code': 'e-instrunent-0013', 'description': 'Data not available'}

xt = XTSConnect(API_KEY, API_SECRET, source)
response = xt.interactive_login()


response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='26Mar2020',
    optionType='CE',
    strikePrice=10000)
print('Option Symbol:', str(respon
  File "<ipython-input-7-a229265891f7>", line 8
    print('Option Symbol:', str(respon
                                      ^
SyntaxError: unexpected EOF while parsing


response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='26Mar2020',
    optionType='CE',
    strikePrice=10000)
print('Option Symbol:', str(response))
Option Symbol: {'type': 'error', 'code': 'e-instrunent-0013', 'description': 'Data not available'}

response = xt.interactive_login()
print("Login: ", response)
Login:  Invalid Json format

from XTConnect.Connect import XTSConnect
API_KEY = "ebaa4a8cf2de358e53c942"
API_SECRET = "Ojre664@S9"
XTS_API_BASE_URL = "https://xts-api.trading"
source = "WEBAPI"
xt = XTSConnect(API_KEY, API_SECRET, source)
response = xt.interactive_login()
print("Login: ", response)

response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='26Mar2020',
    optionType='CE',
    strikePrice=10000)
print('Option Symbol:', str(response))
Login:  {'type': 'success', 'code': 's-user-0001', 'description': 'Valid User.', 'result': {'enums': {'socketEvent': ['joined', 'error', 'warning', 'success', 'order', 'trade', 'logout', 'position', 'tradeConversion'], 'orderSide': ['BUY', 'SELL'], 'orderSource': ['TWSAPI', 'WebAPI', 'MobileAndroidAPI', 'MobileWindowsAPI', 'MobileIOSAPI'], 'positionSqureOffMode': ['DayWise', 'NetWise'], 'positionSquareOffQuantityType': ['Percentage', 'ExactQty'], 'dayOrNet': ['DAY', 'NET'], 'instrumentType': ['Futures', 'Options', 'Spread', 'Equity', 'Spot', 'PreferenceShares', 'Debentures', 'Warrants', 'Miscellaneous', 'MutualFund'], 'exchangeSegment': ['NSECM', 'NSEFO', 'NSECD', 'NSECOMMODITY', 'BSECM', 'BSEFO', 'BSECD', 'NCDEX', 'MSEICM', 'MSEIFO', 'MSEICD', 'MCXFO'], 'exchangeInfo': {'NSECM': {'productType': ['CO', 'BO', 'CNC', 'MIS', 'NRML'], 'orderType': ['StopLimit', 'StopMarket', 'Limit', 'Market'], 'timeInForce': ['DAY', 'IOC']}, 'NSEFO': {'productType': ['CO', 'BO', 'MIS', 'NRML'], 'orderType': ['StopLimit', 'StopMarket', 'Limit', 'Market'], 'timeInForce': ['DAY', 'IOC']}}}, 'clientCodes': ['IIFL24'], 'exchangeSegmentArray': [{'key': 'NSECM', 'value': 'NSECM'}, {'key': 'NSEFO', 'value': 'NSEFO'}], 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiJJSUZMMjRfSU5URVJBQ1RJVkUiLCJwdWJsaWNLZXkiOiJlYmFhNGE4Y2YyZGUzNThlNTNjOTQyIiwiaWF0IjoxNjA4NTMzNDk4LCJleHAiOjE2MDg2MTk4OTh9.gcribpWtUIm5Hf-XidHcmRqUw3qKIPsVji_T2Ajfp8o', 'userID': 'IIFL24', 'isInvestorClient': True, 'isOneTouchUser': False}}
Option Symbol: {'type': 'error', 'code': 'e-instrunent-0013', 'description': 'Data not available'}

response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='31Dec2020',
    optionType='CE',
    strikePrice=10000)
print('Option Symbol:', str(response))
Option Symbol: {'type': 'success', 'code': 's-rds-0', 'description': 'ok', 'result': [{'ExchangeSegment': 2, 'ExchangeInstrumentID': 42065, 'InstrumentType': 2, 'Name': 'NIFTY', 'DisplayName': 'NIFTY 31DEC2020 CE 10000', 'Description': 'NIFTY20DEC10000CE', 'Series': 'OPTIDX', 'InstrumentID': 2036600042065, 'PriceBand': {'High': 4831.95, 'Low': 2716.05, 'HighString': '4831.95', 'LowString': '2716.05', 'CreditRating': '2716.05-4831.95'}, 'FreezeQty': 5001, 'TickSize': 0.05, 'LotSize': 75, 'UnderlyingInstrumentId': -1, 'UnderlyingIndexName': 'Nifty 50', 'ContractExpiration': '2020-12-31T14:30:00', 'ContractExpirationString': '31Dec2020', 'RemainingExpiryDays': 11, 'StrikePrice': 10000, 'OptionType': 3}]}

response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='31Dec2020',
    optionType='CE',
    strikePrice=13650)
print('Option Symbol:', str(response))
Option Symbol: {'type': 'success', 'code': 's-rds-0', 'description': 'ok', 'result': [{'ExchangeSegment': 2, 'ExchangeInstrumentID': 39980, 'InstrumentType': 2, 'Name': 'NIFTY', 'DisplayName': 'NIFTY 31DEC2020 CE 13650', 'Description': 'NIFTY20DEC13650CE', 'Series': 'OPTIDX', 'InstrumentID': 2036600039980, 'PriceBand': {'High': 839, 'Low': 0.05, 'HighString': '839.00', 'LowString': '0.05', 'CreditRating': '0.05-839.00'}, 'FreezeQty': 5001, 'TickSize': 0.05, 'LotSize': 75, 'UnderlyingInstrumentId': -1, 'UnderlyingIndexName': 'Nifty 50', 'ContractExpiration': '2020-12-31T14:30:00', 'ContractExpirationString': '31Dec2020', 'RemainingExpiryDays': 11, 'StrikePrice': 13650, 'OptionType': 3}]}

response = xt.get_option_type(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='31Dec2020')
print('Option Type:', str(response))
Option Type: {'result': ['PE', 'CE']}

response = xt.get_ohlc(
    exchangeSegment=xt.EXCHANGE_NSECM,
    exchangeInstrumentID=22,
    startTime='Dec 16 2019 090000',
    endTime='Dec 18 2019 150000',
    compressionValue=1)
print("OHLC: " + str(response))
OHLC: {'type': 'success', 'code': 'e-instrument-0002', 'description': 'Data found', 'result': {'exchangeSegment': 'NSECM', 'exchangeInstrumentID': '22', 'dataReponse': ''}}

response = xt.get_ohlc(
    exchangeSegment=xt.EXCHANGE_NSECM,
    exchangeInstrumentID=22,
    startTime='Dec 16 2020 090000',
    endTime='Dec 17 2020 150000',
    compressionValue=1)
print("OHLC: " + str(response))
OHLC: {'type': 'success', 'code': 'e-instrument-0002', 'description': 'Data found', 'result': {'exchangeSegment': 'NSECM', 'exchangeInstrumentID': '22', 'dataReponse': ''}}

response = xt.get_config()
print('Config :', response)
Config : {'type': 'success', 'code': 's-response-0001', 'description': 'Fetched configurations successfully', 'result': {'exchangeSegments': {'NSECM': 1, 'NSEFO': 2, 'NSECD': 3, 'NSECO': 4, 'SLBM': 5, 'BSECM': 11, 'BSEFO': 12, 'BSECD': 13, 'BSECO': 14, 'NCDEX': 21, 'MSECM': 41, 'MSEFO': 42, 'MSECD': 43, 'MCXFO': 51}, 'xtsMessageCode': {'touchlineEvent': 1501, 'marketDepthEvent': 1502, 'indexDataEvent': 1504, 'candleDataEvent': 1505, 'openInterestEvent': 1510, 'instrumentPropertyChangeEvent': 1105}, 'publishFormat': ['Binary', 'JSON'], 'broadCastMode': ['Full', 'Partial'], 'instrumentType': {'1': 'Futures', '2': 'Options', '4': 'Spread', '8': 'Equity', '16': 'Spot', '32': 'PreferenceShares', '64': 'Debentures', '128': 'Warrants', '256': 'Miscellaneous', '512': 'MutualFund', 'Futures': 1, 'Options': 2, 'Spread': 4, 'Equity': 8, 'Spot': 16, 'PreferenceShares': 32, 'Debentures': 64, 'Warrants': 128, 'Miscellaneous': 256, 'MutualFund': 512}}}

response = xt.get_series(exchangeSegment=2)
print('Series:', str(response))
Series: {'result': ['OPTSTK', 'OPTIDX', 'FUTSTK', 'FUTIDX']}

response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='21Dec2020',
    optionType='CE',
    strikePrice=13650)
print('Option Symbol:', str(response))
Option Symbol: {'type': 'error', 'code': 'e-instrunent-0013', 'description': 'Data not available'}

response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='31Dec2020',
    optionType='CE',
    strikePrice=13650)
print('Option Symbol:', str(response))
Option Symbol: {'type': 'success', 'code': 's-rds-0', 'description': 'ok', 'result': [{'ExchangeSegment': 2, 'ExchangeInstrumentID': 39980, 'InstrumentType': 2, 'Name': 'NIFTY', 'DisplayName': 'NIFTY 31DEC2020 CE 13650', 'Description': 'NIFTY20DEC13650CE', 'Series': 'OPTIDX', 'InstrumentID': 2036600039980, 'PriceBand': {'High': 839, 'Low': 0.05, 'HighString': '839.00', 'LowString': '0.05', 'CreditRating': '0.05-839.00'}, 'FreezeQty': 5001, 'TickSize': 0.05, 'LotSize': 75, 'UnderlyingInstrumentId': -1, 'UnderlyingIndexName': 'Nifty 50', 'ContractExpiration': '2020-12-31T14:30:00', 'ContractExpirationString': '31Dec2020', 'RemainingExpiryDays': 11, 'StrikePrice': 13650, 'OptionType': 3}]}

response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='24Dec2020',
    optionType='CE',
    strikePrice=13650)
print('Option Symbol:', str(response))
Option Symbol: {'type': 'success', 'code': 's-rds-0', 'description': 'ok', 'result': [{'ExchangeSegment': 2, 'ExchangeInstrumentID': 39972, 'InstrumentType': 2, 'Name': 'NIFTY', 'DisplayName': 'NIFTY 24DEC2020 CE 13650', 'Description': 'NIFTY20D2413650CE', 'Series': 'OPTIDX', 'InstrumentID': 2035900039972, 'PriceBand': {'High': 814.85, 'Low': 0.05, 'HighString': '814.85', 'LowString': '0.05', 'CreditRating': '0.05-814.85'}, 'FreezeQty': 5001, 'TickSize': 0.05, 'LotSize': 75, 'UnderlyingInstrumentId': -1, 'UnderlyingIndexName': 'Nifty 50', 'ContractExpiration': '2020-12-24T14:30:00', 'ContractExpirationString': '24Dec2020', 'RemainingExpiryDays': 4, 'StrikePrice': 13650, 'OptionType': 3}]}

xt.ORDER_TYPE_MARKET
Out[21]: 'MARKET'

xt.TRANSACTION_TYPE_BUY
Out[22]: 'BUY'

xt.EXCHANGE_NSEFO
Out[23]: 'NSEFO'

xt.PRODUCT_MIS
Out[24]: 'MIS'

response = xt.get_series(exchangeSegment=2)
print('Series:', str(response))
Series: {'result': ['OPTSTK', 'OPTIDX', 'FUTSTK', 'FUTIDX']}

response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='31Dec2020',
    optionType='CE',
    strikePrice=13650)
print('Option Symbol:', str(response))
Option Symbol: {'type': 'success', 'code': 's-rds-0', 'description': 'ok', 'result': [{'ExchangeSegment': 2, 'ExchangeInstrumentID': 39980, 'InstrumentType': 2, 'Name': 'NIFTY', 'DisplayName': 'NIFTY 31DEC2020 CE 13650', 'Description': 'NIFTY20DEC13650CE', 'Series': 'OPTIDX', 'InstrumentID': 2036600039980, 'PriceBand': {'High': 839, 'Low': 0.05, 'HighString': '839.00', 'LowString': '0.05', 'CreditRating': '0.05-839.00'}, 'FreezeQty': 5001, 'TickSize': 0.05, 'LotSize': 75, 'UnderlyingInstrumentId': -1, 'UnderlyingIndexName': 'Nifty 50', 'ContractExpiration': '2020-12-31T14:30:00', 'ContractExpirationString': '31Dec2020', 'RemainingExpiryDays': 11, 'StrikePrice': 13650, 'OptionType': 3}]}

response = xt.get_option_symbol(
    exchangeSegment=2,
    series='OPTIDX',
    symbol='NIFTY',
    expiryDate='31Dec2020',
    optionType='PE',
    strikePrice=13650)
print('Option Symbol:', str(response))
Option Symbol: {'type': 'success', 'code': 's-rds-0', 'description': 'ok', 'result': [{'ExchangeSegment': 2, 'ExchangeInstrumentID': 39981, 'InstrumentType': 2, 'Name': 'NIFTY', 'DisplayName': 'NIFTY 31DEC2020 PE 13650', 'Description': 'NIFTY20DEC13650PE', 'Series': 'OPTIDX', 'InstrumentID': 2036600039981, 'PriceBand': {'High': 669.8, 'Low': 0.05, 'HighString': '669.80', 'LowString': '0.05', 'CreditRating': '0.05-669.80'}, 'FreezeQty': 5001, 'TickSize': 0.05, 'LotSize': 75, 'UnderlyingInstrumentId': -1, 'UnderlyingIndexName': 'Nifty 50', 'ContractExpiration': '2020-12-31T14:30:00', 'ContractExpirationString': '31Dec2020', 'RemainingExpiryDays': 11, 'StrikePrice': 13650, 'OptionType': 4}]}


"""Order book Request"""
response = xt.get_order_book()
print("Order Book: ", response)
Order Book:  {'type': 'success', 'code': 's-orders-0001', 'description': 'Success order book', 'result': []}


"""Get Balance Request"""
response = xt.get_balance()
print("Balance: ", response)
Balance:  {'type': 'success', 'code': 's-user-0002', 'description': 'OK', 'result': {'BalanceList': [{'limitHeader': 'ALL|ALL|ALL', 'limitObject': {'RMSSubLimits': {'cashAvailable': '1000000000', 'collateral': 0, 'marginUtilized': '0', 'netMarginAvailable': '1000000000', 'MTM': '0', 'UnrealizedMTM': '0', 'RealizedMTM': '0'}, 'marginAvailable': {'CashMarginAvailable': '1000000000', 'AdhocMargin': '0', 'NotinalCash': '0', 'PayInAmount': '0', 'PayOutAmount': '0', 'CNCSellBenifit': '0', 'DirectCollateral': '0', 'HoldingCollateral': '0', 'ClientBranchAdhoc': '0', 'SellOptionsPremium': '0', 'TotalBranchAdhoc': '0', 'AdhocFOMargin': 'NaN', 'AdhocCurrencyMargin': 'NaN', 'AdhocCommodityMargin': 'NaN'}, 'marginUtilized': {'GrossExposureMarginPresent': '0', 'BuyExposureMarginPresent': '0', 'SellExposureMarginPresent': '0', 'VarELMarginPresent': '0', 'ScripBasketMarginPresent': '0', 'GrossExposureLimitPresent': '0', 'BuyExposureLimitPresent': '0', 'SellExposureLimitPresent': '0', 'CNCLimitUsed': '0', 'CNCAmountUsed': '0', 'MarginUsed': '0', 'LimitUsed': 'NaN', 'TotalSpanMargin': '0', 'ExposureMarginPresent': '0'}, 'limitsAssigned': {'CNCLimit': '0', 'TurnoverLimitPresent': '0', 'MTMLossLimitPresent': '0', 'BuyExposureLimit': '0', 'SellExposureLimit': '0', 'GrossExposureLimit': '0', 'GrossExposureDerivativesLimit': '0', 'BuyExposureFuturesLimit': '0', 'BuyExposureOptionsLimit': '0', 'SellExposureOptionsLimit': '0', 'SellExposureFuturesLimit': '0'}, 'AccountID': 'IIFL24'}}]}}


"""Order book Request"""
response = xt.get_order_book()
print("Order Book: ", response)
Order Book:  {'type': 'success', 'code': 's-orders-0001', 'description': 'Success order book', 'result': []}

response = xt.place_order(
    exchangeSegment=xt.EXCHANGE_NSEFO,
    exchangeInstrumentID=39972,
    productType=xt.PRODUCT_MIS,
    orderType=xt.ORDER_TYPE_MARKET,
    orderSide=xt.TRANSACTION_TYPE_SELL,  
    timeInForce=xt.VALIDITY_DAY,
    disclosedQuantity=0,
    orderQuantity=75,
    limitPrice=0,
    stopPrice=0,
    orderUniqueIdentifier="123777")
print("Place Order: ", response)

# extracting the order id from response
if response['type'] != 'error':
    OrderID = response['result']['AppOrderID']
Place Order:  {'type': 'success', 'code': 's-orders-0001', 'description': 'Request sent', 'result': {'AppOrderID': 10026325, 'OrderUniqueIdentifier': '123777', 'ClientID': 'IIFL24'}}


"""Get Balance Request"""
response = xt.get_balance()
print("Balance: ", response)
Balance:  {'type': 'success', 'code': 's-user-0002', 'description': 'OK', 'result': {'BalanceList': [{'limitHeader': 'ALL|ALL|ALL', 'limitObject': {'RMSSubLimits': {'cashAvailable': '1000000000', 'collateral': 0, 'marginUtilized': '20163.6', 'netMarginAvailable': '999979836.4', 'MTM': '-63.749999999999844', 'UnrealizedMTM': '-63.749999999999844', 'RealizedMTM': '0'}, 'marginAvailable': {'CashMarginAvailable': '1000000000', 'AdhocMargin': '0', 'NotinalCash': '0', 'PayInAmount': '0', 'PayOutAmount': '0', 'CNCSellBenifit': '0', 'DirectCollateral': '0', 'HoldingCollateral': '0', 'ClientBranchAdhoc': '0', 'SellOptionsPremium': '0', 'TotalBranchAdhoc': '0', 'AdhocFOMargin': 'NaN', 'AdhocCurrencyMargin': 'NaN', 'AdhocCommodityMargin': 'NaN'}, 'marginUtilized': {'GrossExposureMarginPresent': '0', 'BuyExposureMarginPresent': '0', 'SellExposureMarginPresent': '0', 'VarELMarginPresent': '0', 'ScripBasketMarginPresent': '0', 'GrossExposureLimitPresent': '0', 'BuyExposureLimitPresent': '0', 'SellExposureLimitPresent': '0', 'CNCLimitUsed': '0', 'CNCAmountUsed': '0', 'MarginUsed': '20163.6', 'LimitUsed': 'NaN', 'TotalSpanMargin': '0', 'ExposureMarginPresent': '20099.85'}, 'limitsAssigned': {'CNCLimit': '0', 'TurnoverLimitPresent': '0', 'MTMLossLimitPresent': '0', 'BuyExposureLimit': '0', 'SellExposureLimit': '0', 'GrossExposureLimit': '0', 'GrossExposureDerivativesLimit': '0', 'BuyExposureFuturesLimit': '0', 'BuyExposureOptionsLimit': '0', 'SellExposureOptionsLimit': '0', 'SellExposureFuturesLimit': '0'}, 'AccountID': 'IIFL24'}}]}}


"""Order book Request"""
response = xt.get_order_book()
print("Order Book: ", response)
Order Book:  {'type': 'success', 'code': 's-orders-0001', 'description': 'Success order book', 'result': [{'LoginID': 'IIFL24', 'ClientID': 'IIFL24', 'AppOrderID': 10026325, 'OrderReferenceID': '', 'GeneratedBy': 'TWSAPI', 'ExchangeOrderID': 'X_30698343', 'OrderCategoryType': 'NORMAL', 'ExchangeSegment': 'NSEFO', 'ExchangeInstrumentID': 39972, 'OrderSide': 'Sell', 'OrderType': 'Market', 'ProductType': 'MIS', 'TimeInForce': 'DAY', 'OrderPrice': 0, 'OrderQuantity': 75, 'OrderStopPrice': 0, 'OrderStatus': 'Filled', 'OrderAverageTradedPrice': '31.80', 'LeavesQuantity': 0, 'CumulativeQuantity': 75, 'OrderDisclosedQuantity': 0, 'OrderGeneratedDateTime': '2020-12-21T14:49:16.0287269', 'ExchangeTransactTime': '2020-12-21T14:49:16+05:30', 'LastUpdateDateTime': '2020-12-21T14:49:16.350748', 'OrderExpiryDate': '1980-01-01T00:00:00', 'CancelRejectReason': '', 'OrderUniqueIdentifier': '123777', 'OrderLegStatus': 'SingleOrderLeg', 'IsSpread': False, 'MessageCode': 9004, 'MessageVersion': 4, 'TokenID': 0, 'ApplicationType': 0, 'SequenceNumber': 307029544554927}]}

"""Get Order History Request"""
response = xt.get_order_history(appOrderID=OrderID)
print("Order History: ", response)
Order History:  {'type': 'success', 'code': 's-orders-0001', 'description': 'Success order history', 'result': [{'LoginID': 'IIFL24', 'ClientID': 'IIFL24', 'AppOrderID': 10026325, 'OrderReferenceID': '', 'GeneratedBy': 'TWSAPI', 'ExchangeOrderID': '', 'OrderCategoryType': 'NORMAL', 'ExchangeSegment': 'NSEFO', 'ExchangeInstrumentID': 39972, 'OrderSide': 'Sell', 'OrderType': 'Market', 'ProductType': 'MIS', 'TimeInForce': 'DAY', 'OrderPrice': 0, 'OrderQuantity': 75, 'OrderStopPrice': 0, 'OrderStatus': 'PendingNew', 'OrderAverageTradedPrice': '', 'LeavesQuantity': 75, 'CumulativeQuantity': 0, 'OrderDisclosedQuantity': 0, 'OrderGeneratedDateTime': '2020-12-21T14:49:16.0287269', 'ExchangeTransactTime': '2020-12-21T14:49:16.0287269+05:30', 'LastUpdateDateTime': '2020-12-21T14:49:16.0287269', 'OrderExpiryDate': '1980-01-01T00:00:00', 'CancelRejectReason': '', 'OrderUniqueIdentifier': '123777', 'OrderLegStatus': 'SingleOrderLeg', 'IsSpread': False, 'MessageCode': 9004, 'MessageVersion': 4, 'TokenID': 0, 'ApplicationType': 0, 'SequenceNumber': 307029544557781}, {'LoginID': 'IIFL24', 'ClientID': 'IIFL24', 'AppOrderID': 10026325, 'OrderReferenceID': '', 'GeneratedBy': 'TWSAPI', 'ExchangeOrderID': 'X_30698343', 'OrderCategoryType': 'NORMAL', 'ExchangeSegment': 'NSEFO', 'ExchangeInstrumentID': 39972, 'OrderSide': 'Sell', 'OrderType': 'Market', 'ProductType': 'MIS', 'TimeInForce': 'DAY', 'OrderPrice': 0, 'OrderQuantity': 75, 'OrderStopPrice': 0, 'OrderStatus': 'New', 'OrderAverageTradedPrice': '', 'LeavesQuantity': 75, 'CumulativeQuantity': 0, 'OrderDisclosedQuantity': 0, 'OrderGeneratedDateTime': '2020-12-21T14:49:16.0287269', 'ExchangeTransactTime': '2020-12-21T14:49:16+05:30', 'LastUpdateDateTime': '2020-12-21T14:49:16.0317267', 'OrderExpiryDate': '1980-01-01T00:00:00', 'CancelRejectReason': '', 'OrderUniqueIdentifier': '123777', 'OrderLegStatus': 'SingleOrderLeg', 'IsSpread': False, 'MessageCode': 9004, 'MessageVersion': 4, 'TokenID': 0, 'ApplicationType': 0, 'SequenceNumber': 307029544557782}, {'LoginID': 'IIFL24', 'ClientID': 'IIFL24', 'AppOrderID': 10026325, 'OrderReferenceID': '', 'GeneratedBy': 'TWSAPI', 'ExchangeOrderID': 'X_30698343', 'OrderCategoryType': 'NORMAL', 'ExchangeSegment': 'NSEFO', 'ExchangeInstrumentID': 39972, 'OrderSide': 'Sell', 'OrderType': 'Market', 'ProductType': 'MIS', 'TimeInForce': 'DAY', 'OrderPrice': 0, 'OrderQuantity': 75, 'OrderStopPrice': 0, 'OrderStatus': 'Filled', 'OrderAverageTradedPrice': '31.80', 'LeavesQuantity': 0, 'CumulativeQuantity': 75, 'OrderDisclosedQuantity': 0, 'OrderGeneratedDateTime': '2020-12-21T14:49:16.0287269', 'ExchangeTransactTime': '2020-12-21T14:49:16+05:30', 'LastUpdateDateTime': '2020-12-21T14:49:16.350748', 'OrderExpiryDate': '1980-01-01T00:00:00', 'CancelRejectReason': '', 'OrderUniqueIdentifier': '123777', 'OrderLegStatus': 'SingleOrderLeg', 'IsSpread': False, 'MessageCode': 9004, 'MessageVersion': 4, 'TokenID': 0, 'ApplicationType': 0, 'SequenceNumber': 307029544557783}]}

"""Get Trade Book Request"""
response = xt.get_trade()
print("Trade Book: ", response)
Trade Book:  {'type': 'success', 'code': 's-orders-0001', 'description': 'Success trade book', 'result': [{'LoginID': 'IIFL24', 'ClientID': 'IIFL24', 'AppOrderID': 10026325, 'OrderReferenceID': '', 'GeneratedBy': 'TWSAPI', 'ExchangeOrderID': 'X_30698343', 'OrderCategoryType': 'NORMAL', 'ExchangeSegment': 'NSEFO', 'ExchangeInstrumentID': 39972, 'OrderSide': 'Sell', 'OrderType': 'Market', 'ProductType': 'MIS', 'TimeInForce': 'DAY', 'OrderPrice': 0, 'OrderQuantity': 75, 'OrderStopPrice': 0, 'OrderStatus': 'Filled', 'OrderAverageTradedPrice': '31.80', 'LeavesQuantity': 0, 'CumulativeQuantity': 75, 'OrderDisclosedQuantity': 0, 'OrderGeneratedDateTime': '2020-12-21T14:49:16.0287269', 'ExchangeTransactTime': '2020-12-21T14:49:16+05:30', 'LastUpdateDateTime': '2020-12-21T14:49:16.350748', 'CancelRejectReason': '', 'OrderUniqueIdentifier': '123777', 'OrderLegStatus': 'SingleOrderLeg', 'LastTradedPrice': 31.8, 'LastTradedQuantity': 75, 'LastExecutionTransactTime': '2020-12-21T14:49:16', 'ExecutionID': '30901451', 'ExecutionReportIndex': 3, 'IsSpread': False, 'MessageCode': 9005, 'MessageVersion': 4, 'TokenID': 0, 'ApplicationType': 0, 'SequenceNumber': 307029544557831}]}

response = xt.place_order(
    exchangeSegment=xt.EXCHANGE_NSEFO,
    exchangeInstrumentID=39972,
    productType=xt.PRODUCT_MIS,
    orderType=xt.ORDER_TYPE_MARKET,
    orderSide=xt.TRANSACTION_TYPE_BUY,  
    timeInForce=xt.VALIDITY_DAY,
    disclosedQuantity=0,
    orderQuantity=75,
    limitPrice=0,
    stopPrice=0,
    orderUniqueIdentifier="123888")
print("Place Order: ", response)


# extracting the order id from response
if response['type'] != 'error':
    OrderID = response['result']['AppOrderID']
Place Order:  {'type': 'success', 'code': 's-orders-0001', 'description': 'Request sent', 'result': {'AppOrderID': 10026335, 'OrderUniqueIdentifier': '123888', 'ClientID': 'IIFL24'}}

"""Get Trade Book Request"""
response = xt.get_trade()
print("Trade Book: ", response)
Trade Book:  {'type': 'success', 'code': 's-orders-0001', 'description': 'Success trade book', 'result': 
[{'LoginID': 'IIFL24', 'ClientID': 'IIFL24', 'AppOrderID': 10026335, 'OrderReferenceID': '', 'GeneratedBy': 'TWSAPI', 'ExchangeOrderID': 'X_30698353', 'OrderCategoryType': 'NORMAL', 'ExchangeSegment': 'NSEFO', 'ExchangeInstrumentID': 39972, 'OrderSide': 'Buy', 'OrderType': 'Market', 'ProductType': 'MIS', 'TimeInForce': 'DAY', 'OrderPrice': 0, 'OrderQuantity': 75, 'OrderStopPrice': 0, 'OrderStatus': 'Filled', 'OrderAverageTradedPrice': '23.90', 'LeavesQuantity': 0, 'CumulativeQuantity': 75, 'OrderDisclosedQuantity': 0, 'OrderGeneratedDateTime': '2020-12-21T14:59:41.1535468', 'ExchangeTransactTime': '2020-12-21T14:59:42+05:30', 'LastUpdateDateTime': '2020-12-21T14:59:42.1276213', 'CancelRejectReason': '', 'OrderUniqueIdentifier': '123888', 'OrderLegStatus': 'SingleOrderLeg', 'LastTradedPrice': 23.9, 'LastTradedQuantity': 75, 'LastExecutionTransactTime': '2020-12-21T14:59:42', 'ExecutionID': '30903994', 'ExecutionReportIndex': 3, 'IsSpread': False, 'MessageCode': 9005, 'MessageVersion': 4, 'TokenID': 0, 'ApplicationType': 0, 'SequenceNumber': 307029544558973}, 

{'LoginID': 'IIFL24', 'ClientID': 'IIFL24', 'AppOrderID': 10026325, 'OrderReferenceID': '', 'GeneratedBy': 'TWSAPI', 'ExchangeOrderID': 'X_30698343', 'OrderCategoryType': 'NORMAL', 'ExchangeSegment': 'NSEFO', 'ExchangeInstrumentID': 39972, 'OrderSide': 'Sell', 'OrderType': 'Market', 'ProductType': 'MIS', 'TimeInForce': 'DAY', 'OrderPrice': 0, 'OrderQuantity': 75, 'OrderStopPrice': 0, 'OrderStatus': 'Filled', 'OrderAverageTradedPrice': '31.80', 'LeavesQuantity': 0, 'CumulativeQuantity': 75, 'OrderDisclosedQuantity': 0, 'OrderGeneratedDateTime': '2020-12-21T14:49:16.0287269', 'ExchangeTransactTime': '2020-12-21T14:49:16+05:30', 'LastUpdateDateTime': '2020-12-21T14:49:16.350748', 'CancelRejectReason': '', 'OrderUniqueIdentifier': '123777', 'OrderLegStatus': 'SingleOrderLeg', 'LastTradedPrice': 31.8, 'LastTradedQuantity': 75, 'LastExecutionTransactTime': '2020-12-21T14:49:16', 'ExecutionID': '30901451', 'ExecutionReportIndex': 3, 'IsSpread': False, 'MessageCode': 9005, 'MessageVersion': 4, 'TokenID': 0, 'ApplicationType': 0, 'SequenceNumber': 307029544558972}]}

response = xt.get_order_book()
print("Order Book: ", response)
Order Book:  {'type': 'success', 'code': 's-orders-0001', 'description': 'Success order book', 'result': 
[{'LoginID': 'IIFL24', 'ClientID': 'IIFL24', 'AppOrderID': 10026335, 'OrderReferenceID': '', 'GeneratedBy': 'TWSAPI', 'ExchangeOrderID': 'X_30698353', 'OrderCategoryType': 'NORMAL', 'ExchangeSegment': 'NSEFO', 'ExchangeInstrumentID': 39972, 'OrderSide': 'Buy', 'OrderType': 'Market', 'ProductType': 'MIS', 'TimeInForce': 'DAY', 'OrderPrice': 0, 'OrderQuantity': 75, 'OrderStopPrice': 0, 'OrderStatus': 'Filled', 'OrderAverageTradedPrice': '23.90', 'LeavesQuantity': 0, 'CumulativeQuantity': 75, 'OrderDisclosedQuantity': 0, 'OrderGeneratedDateTime': '2020-12-21T14:59:41.1535468', 'ExchangeTransactTime': '2020-12-21T14:59:42+05:30', 'LastUpdateDateTime': '2020-12-21T14:59:42.1276213', 'OrderExpiryDate': '1980-01-01T00:00:00', 'CancelRejectReason': '', 'OrderUniqueIdentifier': '123888', 'S', 'IsSpread': False, 'MessageCode': 9004, 'MessageVersion': 4, 'TokenID': 0, 'ApplicationType': 0, 'SequenceNumber': 307029544559178}, {'LoginID': 'IIFL24', 'ClientID': 'IIFL24', 'AppOrderID': 10026325, 'OrderReferenceID': '', 'GeneratedBy': 'TWSAPI', 'ExchangeOrderID': 'X_30698343', 'OrderCategoryType': 'NORMAL', 'ExchangeSegment': 'NSEFO', 'ExchangeInstrumentID': 39972, 'OrderSide': 'Sell', 'OrderType': 'Market', 'ProductType': 'MIS', 'TimeInForce': 'DAY', 'OrderPrice': 0, 'OrderQuantity': 75, 'OrderStopPrice': 0, 'OrderStatus': 'Filled', 'OrderAverageTradedPrice': '31.80', 'LeavesQuantity': 0, 'CumulativeQuantity': 75, 'OrderDisclosedQuantity': 0, 'OrderGeneratedDateTime': '2020-12-21T14:49:16.0287269', 'ExchangeTransactTime': '2020-12-21T14:49:16+05:30', 'LastUpdateDateTime': '2020-12-21T14:49:16.350748', 'OrderExpiryDate': '1980-01-01T00:00:00', 'CancelRejectReason': '', 'OrderUniqueIdentifier': '123777', 'OrderLegStatus': 'SingleOrderLeg', 'IsSpread': False, 'MessageCode': 9004, 'MessageVersion': 4, 'TokenID': 0, 'ApplicationType': 0, 'SequenceNumber': 307029544559177}]}

xt.get_position_daywise()
Out[40]: 
{'type': 'success',
 'code': 's-portfolio-0001',
 'description': 'Success position',
 'result': {'positionList': [{'AccountID': 'IIFL24',
    'TradingSymbol': 'NIFTY 24DEC2020 CE 13650',
    'ExchangeSegment': 'NSEFO',
    'ExchangeInstrumentId': '39972',
    'ProductType': 'MIS',
    'Marketlot': '75',
    'Multiplier': '1',
    'BuyAveragePrice': '23.90',
    'SellAveragePrice': '31.80',
    'OpenBuyQuantity': '75',
    'OpenSellQuantity': '75',
    'Quantity': '0',
    'BuyAmount': '1,792.50',
    'SellAmount': '2,385.00',
    'NetAmount': '592.50',
    'UnrealizedMTM': '0.00',
    'RealizedMTM': '592.50', 
    'MTM': '592.50',
    'BEP': '0.00',
    'SumOfTradedQuantityAndPriceBuy': '1,792.50',
    'SumOfTradedQuantityAndPriceSell': '2,385.00',
    'MessageCode': 9002,
    'MessageVersion': 1,S
    'TokenID': 0,
    'ApplicationType': 0,
    'SequenceNumber': 307029544564651}]}}
    
  
08-01-2021 10:23:08 , -326.25
Traceback (most recent call last):

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)

TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond


During handling of the above exception, another exception occurred:

Traceback (most recent call last):

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\connectionpool.py", line 381, in _make_request
    self._validate_conn(conn)

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\connectionpool.py", line 978, in _validate_conn
    conn.connect()

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\connection.py", line 309, in connect
    conn = self._new_conn()

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(

NewConnectionError: <urllib3.connection.HTTPSConnection object at 0x00000199062C4310>: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond


During handling of the above exception, another exception occurred:

Traceback (most recent call last):

  File "C:\Users\mling\anaconda3\lib\site-packages\requests\adapters.py", line 439, in send
    resp = conn.urlopen(

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(

  File "C:\Users\mling\anaconda3\lib\site-packages\urllib3\util\retry.py", line 446, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))

MaxRetryError: HTTPSConnectionPool(host='developers.symphonyfintech.in', port=443): Max retries exceeded with url: /interactive/portfolio/positions?dayOrNet=DayWise (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x00000199062C4310>: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond'))


During handling of the above exception, another exception occurred:

Traceback (most recent call last):

  File "C:\Users\mling\anaconda3\lib\site-packages\xts-0.1-py3.8.egg\XTConnect\Connect.py", line 351, in get_position_daywise
    response = self._get('portfolio.positions', params)

  File "C:\Users\mling\anaconda3\lib\site-packages\xts-0.1-py3.8.egg\XTConnect\Connect.py", line 635, in _get
    return self._request(route, "GET", params)

  File "C:\Users\mling\anaconda3\lib\site-packages\xts-0.1-py3.8.egg\XTConnect\Connect.py", line 671, in _request
    raise e

  File "C:\Users\mling\anaconda3\lib\site-packages\xts-0.1-py3.8.egg\XTConnect\Connect.py", line 663, in _request
    r = self.reqsession.request(method,

  File "C:\Users\mling\anaconda3\lib\site-packages\requests\api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)

  File "C:\Users\mling\anaconda3\lib\site-packages\requests\sessions.py", line 530, in request
    resp = self.send(prep, **send_kwargs)

  File "C:\Users\mling\anaconda3\lib\site-packages\requests\sessions.py", line 643, in send
    r = adapter.send(request, **kwargs)

  File "C:\Users\mling\anaconda3\lib\site-packages\requests\adapters.py", line 516, in send
    raise ConnectionError(e, request=request)

ConnectionError: HTTPSConnectionPool(host='developers.symphonyfintech.in', port=443): Max retries exceeded with url: /interactive/portfolio/positions?dayOrNet=DayWise (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x00000199062C4310>: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond'))


During handling of the above exception, another exception occurred:

Traceback (most recent call last):

  File "<ipython-input-8-a97bd6f16c32>", line 1, in <module>
    scheduler()

  File "<ipython-input-1-8142b3337030>", line 303, in scheduler
    schedule.run_pending()

  File "C:\Users\mling\anaconda3\lib\site-packages\schedule\__init__.py", line 563, in run_pending
    default_scheduler.run_pending()

  File "C:\Users\mling\anaconda3\lib\site-packages\schedule\__init__.py", line 94, in run_pending
    self._run_job(job)

  File "C:\Users\mling\anaconda3\lib\site-packages\schedule\__init__.py", line 147, in _run_job
    ret = job.run()

  File "C:\Users\mling\anaconda3\lib\site-packages\schedule\__init__.py", line 466, in run
    ret = self.job_func()

  File "<ipython-input-1-8142b3337030>", line 227, in runOrders
    runSqOffLogics(monitor)

  File "<ipython-input-1-8142b3337030>", line 252, in runSqOffLogics
    cur_PnL = get_global_PnL()

  File "<ipython-input-1-8142b3337030>", line 158, in get_global_PnL
    positionList=xt.get_position_daywise()['result']['positionList']

  File "C:\Users\mling\anaconda3\lib\site-packages\xts-0.1-py3.8.egg\XTConnect\Connect.py", line 354, in get_position_daywise
    return response['description']

UnboundLocalError: local variable 'response' referenced before assignment
